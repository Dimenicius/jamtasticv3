[gd_scene load_steps=10 format=2]

[ext_resource path="res://scenes/Maps.tscn" type="PackedScene" id=1]
[ext_resource path="res://scripts/Maps.gd" type="Script" id=2]
[ext_resource path="res://arte/map/tilesets/basic_test.tres" type="TileSet" id=3]
[ext_resource path="res://scenes/sound_source.tscn" type="PackedScene" id=4]
[ext_resource path="res://scripts/sound_source.gd" type="Script" id=5]
[ext_resource path="res://scenes/CanvasModulate.tscn" type="PackedScene" id=6]
[ext_resource path="res://scenes/Player.tscn" type="PackedScene" id=7]

[sub_resource type="Shader" id=1]

code = "shader_type canvas_item;

// Based on crt-easymode
// https://github.com/libretro/glsl-shaders/blob/master/crt/shaders/crt-easymode.glsl

uniform float screen_base_size = 200.0;

uniform float sharpness_h : hint_range(0.0, 1.0, 0.05); // 0.5
uniform float sharpness_v : hint_range(0.0, 1.0, 0.05); // 1.0
uniform float mask_strength : hint_range(0.0, 1.0, 0.01); // 0.3
uniform float mask_dot_width : hint_range(1.0, 100.0, 1.0); // 1.0
uniform float mask_dot_height : hint_range(1.0, 100.0, 1.0); // 1.0
uniform float mask_stagger : hint_range(0.0, 100.0, 1.0); // 0.0
uniform float mask_size : hint_range(1.0, 100.0, 1.0); // 1.0
uniform float scanline_strength : hint_range(0.0, 1.0, 0.05); // 1.0
uniform float scanline_beam_width_min : hint_range(0.5, 5.0, 0.5); // 1.5
uniform float scanline_beam_width_max : hint_range(0.5, 5.0, 0.5); // 1.5
uniform float scanline_bright_min : hint_range(0.0, 1.0, 0.05); // 0.35
uniform float scanline_bright_max : hint_range(0.0, 1.0, 0.05); // 0.65
uniform float scanline_cutoff : hint_range(1.0, 1000.0, 1.0); // 400.0
uniform float gamma_input : hint_range(0.1, 5.0, 0.1); // 2.0
uniform float gamma_output : hint_range(0.1, 5.0, 0.1); // 1.8
uniform float bright_boost : hint_range(1.0, 2.0, 0.01); // 1.2
uniform float dilation : hint_range(0.0, 1.0, 1.0); // 1.0

vec4 fix(vec4 c)
{
	return vec4(
				max(abs(c.x), 0.00001),
				max(abs(c.y), 0.00001),
				max(abs(c.z), 0.00001),
				max(abs(c.w), 0.00001)
			);
}

vec4 dilate(vec4 col)
{
	vec4 x = mix(vec4(1.0), col, dilation);
	return col * x;
}

vec4 tex2D(sampler2D tex, vec2 uv)
{
	return dilate(textureLod(tex, uv, 0));
}

float curve_distance(float x, float sharp)
{
	float x_step = step(0.5, x);
	float curve = 0.5 - sqrt(0.25 - (x - x_step) * (x - x_step)) * sign(0.5 - x);
	return mix(x, curve, sharp);
}

mat4 get_color_matrix(sampler2D tex, vec2 co, vec2 dx)
{
	return mat4(tex2D(tex, co - dx), tex2D(tex, co), tex2D(tex, co + dx), tex2D(tex, co + 2.0 * dx));
}

vec3 filter_lanczos(vec4 coeffs, mat4 color_matrix)
{
	vec4 col = color_matrix * coeffs;
	vec4 sample_min = min(color_matrix[1], color_matrix[2]);
	vec4 sample_max = max(color_matrix[1], color_matrix[2]);

	col = clamp(col, sample_min, sample_max);

	return col.rgb;
}

void fragment()
{
	float PI = 3.141592653589;

	vec2 input_size = vec2(textureSize(SCREEN_TEXTURE, 0));
	if (min(input_size.x, input_size.y) > screen_base_size)
	{
		float mult = screen_base_size / min(input_size.x, input_size.y);
		input_size *= mult;
	}

	vec4 source_size = vec4(input_size, vec2(1, 1) / input_size);
	vec4 output_size = vec4(vec2(1, 1) / SCREEN_PIXEL_SIZE, SCREEN_PIXEL_SIZE);

	vec2 dx = vec2(source_size.z, 0.0);
	vec2 dy = vec2(0.0, source_size.w);
	vec2 pix_co = SCREEN_UV * source_size.xy - vec2(0.5, 0.5);
	vec2 tex_co = (floor(pix_co) + vec2(0.5, 0.5)) * source_size.zw;
	vec2 dist = fract(pix_co);

	float curve_x;
	vec3 col, col2;

	curve_x = curve_distance(dist.x, sharpness_h * sharpness_h);

	vec4 coeffs = PI * vec4(1.0 + curve_x, curve_x, 1.0 - curve_x, 2.0 - curve_x);

	coeffs = fix(coeffs);
	coeffs = 2.0 * sin(coeffs) * sin(coeffs * 0.5) / (coeffs * coeffs);
	coeffs /= dot(coeffs, vec4(1.0));

	col  = filter_lanczos(coeffs, get_color_matrix(SCREEN_TEXTURE, tex_co, dx));
	col2 = filter_lanczos(coeffs, get_color_matrix(SCREEN_TEXTURE, tex_co + dy, dx));

	col = mix(col, col2, curve_distance(dist.y, sharpness_v));
	col = pow(col, vec3(gamma_input / (dilation + 1.0)));

	float luma = dot(vec3(0.2126, 0.7152, 0.0722), col);
	float bright = (max(col.r, max(col.g, col.b)) + luma) * 0.5;
	float scan_bright = clamp(bright, scanline_bright_min, scanline_bright_max);
	float scan_beam = clamp(bright * scanline_beam_width_max, scanline_beam_width_min, scanline_beam_width_max);
	float scan_weight = 1.0 - pow(cos(SCREEN_UV.y * 2.0 * PI * source_size.y) * 0.5 + 0.5, scan_beam) * scanline_strength;

	float mask = 1.0 - mask_strength;
	vec2 mod_fac = floor(SCREEN_UV * output_size.xy * source_size.xy / (input_size.xy * vec2(mask_size, mask_dot_height * mask_size)));
	int dot_no = int(mod((mod_fac.x + mod(mod_fac.y, 2.0) * mask_stagger) / mask_dot_width, 3.0));
	vec3 mask_weight;

	if (dot_no == 0)
	{
		mask_weight = vec3(1.0, mask, mask);
	}
	else if (dot_no == 1)
	{
		mask_weight = vec3(mask, 1.0, mask);
	}
	else
	{
		mask_weight = vec3(mask, mask, 1.0);
	}

	if (input_size.y >= scanline_cutoff)
	{
		scan_weight = 1.0;
	}

	col2 = col.rgb;
	col *= vec3(scan_weight);
	col = mix(col, col2, scan_bright);
	col *= mask_weight;
	col = pow(col, vec3(1.0 / gamma_output));

	COLOR = vec4(col * bright_boost, 1.0);"

[sub_resource type="ShaderMaterial" id=2]

render_priority = 0
shader = SubResource( 1 )

[node name="level_01" instance=ExtResource( 1 )]

script = ExtResource( 2 )

[node name="map" parent="nav" index="0"]

tile_set = ExtResource( 3 )
collision_layer = 1015809
collision_mask = 1015809
tile_data = PoolIntArray( -524281, 2, 0, -524280, 4, 0, -524279, 3, 0, -524278, 4, 0, -524277, 3, 0, -524276, 4, 0, -524275, 3, 0, -524274, 4, 0, -524273, 3, 0, -524272, 4, 0, -524271, 3, 0, -524270, 2, 0, -458745, 5, 0, -458744, 0, 0, -458743, 0, 0, -458742, 0, 0, -458741, 0, 0, -458740, 0, 0, -458739, 0, 0, -458738, 0, 0, -458737, 0, 0, -458736, 0, 0, -458735, 0, 0, -458734, 5, 0, -393209, 1, 0, -393208, 4, 0, -393207, 3, 0, -393206, 2, 0, -393205, 0, 0, -393204, 0, 0, -393203, 0, 0, -393202, 4, 0, -393201, 3, 0, -393200, 4, 0, -393199, 3, 0, -393198, 1, 0, -327670, 5, 0, -327669, 0, 0, -327668, 0, 0, -327667, 0, 0, -327666, 2, 0, -262136, 4, 0, -262135, 3, 0, -262134, 1, 0, -262133, 0, 0, -262132, 0, 0, -262131, 0, 0, -262130, 1, 0, -262129, 4, 0, -262128, 3, 0, -262127, 4, 0, -262126, 3, 0, -262125, 4, 0, -262124, 3, 0, -196601, 0, 0, -196600, 0, 0, -196599, 0, 0, -196598, 0, 0, -196597, 0, 0, -196596, 0, 0, -196595, 0, 0, -196594, 0, 0, -196593, 0, 0, -196592, 0, 0, -196591, 0, 0, -196590, 0, 0, -196589, 0, 0, -131065, 0, 0, -131064, 0, 0, -131063, 4, 0, -131062, 0, 0, -131061, 0, 0, -131060, 0, 0, -131059, 0, 0, -131058, 0, 0, -131057, 0, 0, -131056, 0, 0, -131055, 4, 0, -131054, 0, 0, -131053, 0, 0, -65529, 0, 0, -65528, 0, 0, -65527, 0, 0, -65526, 0, 0, -65525, 0, 0, -65524, 0, 0, -65523, 4, 0, -65522, 3, 0, -65521, 0, 0, -65520, 0, 0, -65519, 0, 0, -65518, 0, 0, -65517, 0, 0, 7, 0, 0, 8, 0, 0, 9, 0, 0, 10, 0, 0, 11, 4, 0, 12, 0, 0, 13, 0, 0, 14, 0, 0, 15, 0, 0, 16, 0, 0, 17, 0, 0, 18, 4, 0, 19, 0, 0, 65543, 0, 0, 65544, 0, 0, 65545, 0, 0, 65546, 0, 0, 65547, 0, 0, 65548, 0, 0, 65549, 0, 0, 65550, 0, 0, 65551, 0, 0, 65552, 0, 0, 65553, 0, 0, 65554, 0, 0, 65555, 0, 0 )

[node name="world_pos" parent="nav" index="1"]

position = Vector2( 580.332, 281.496 )

[node name="mob_container" type="Node" parent="." index="1"]

[node name="sound_source" parent="." index="2" instance=ExtResource( 4 )]

position = Vector2( 1110, -420 )
script = ExtResource( 5 )
_sections_unfolded = [ "Z Index" ]

[node name="Sprite" parent="sound_source" index="2"]

_sections_unfolded = [ "Transform", "Visibility", "Z Index" ]

[node name="interact_button" parent="sound_source" index="3"]

visible = true

[node name="CanvasModulate" parent="." index="3" instance=ExtResource( 6 )]

[node name="Player" parent="." index="4" instance=ExtResource( 7 )]

editor/display_folded = true
position = Vector2( 580, -410 )
z_as_relative = false
_sections_unfolded = [ "Audio Bus", "Collision", "Material", "Pickable", "Transform", "Visibility", "Z Index" ]

[node name="sprite" parent="Player" index="1"]

material = SubResource( 2 )
_sections_unfolded = [ "Material", "Transform", "Visibility", "Z Index" ]

[connection signal="area_entered" from="sound_source" to="Player" method="_on_sound_source_area_entered"]

[connection signal="area_exited" from="sound_source" to="Player" method="_on_sound_source_area_exited"]

[connection signal="can_interact" from="Player" to="sound_source" method="_on_Player_can_interact"]

[connection signal="cannot_interact" from="Player" to="sound_source" method="_on_Player_cannot_interact"]


[editable path="sound_source"]
[editable path="Player"]
